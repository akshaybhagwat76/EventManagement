//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MiidWeb
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MiidEntities : DbContext
    {
        public MiidEntities()
            : base("name=MiidEntities")
        {
            this.Configuration.LazyLoadingEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AccountType> AccountTypes { get; set; }
        public virtual DbSet<BankTransaction> BankTransactions { get; set; }
        public virtual DbSet<CM> CMS { get; set; }
        public virtual DbSet<Configuration> Configurations { get; set; }
        public virtual DbSet<Device> Devices { get; set; }
        public virtual DbSet<DeviceLogin> DeviceLogins { get; set; }
        public virtual DbSet<EndUser> EndUsers { get; set; }
        public virtual DbSet<ErrorLog> ErrorLogs { get; set; }
        public virtual DbSet<Event> Events { get; set; }
        public virtual DbSet<EventCategory> EventCategories { get; set; }
        public virtual DbSet<EventImage> EventImages { get; set; }
        public virtual DbSet<EventOrganiser> EventOrganisers { get; set; }
        public virtual DbSet<FeeConfiguration> FeeConfigurations { get; set; }
        public virtual DbSet<Friend> Friends { get; set; }
        public virtual DbSet<Incident> Incidents { get; set; }
        public virtual DbSet<LogShipper> LogShippers { get; set; }
        public virtual DbSet<marker> markers { get; set; }
        public virtual DbSet<MyMoney> MyMoneys { get; set; }
        public virtual DbSet<NewsFeed> NewsFeeds { get; set; }
        public virtual DbSet<NewsFeedComment> NewsFeedComments { get; set; }
        public virtual DbSet<NFCTag> NFCTags { get; set; }
        public virtual DbSet<ParentChild> ParentChilds { get; set; }
        public virtual DbSet<POSTagScan> POSTagScans { get; set; }
        public virtual DbSet<POSTransaction> POSTransactions { get; set; }
        public virtual DbSet<PrivateMessage> PrivateMessages { get; set; }
        public virtual DbSet<PromoCode> PromoCodes { get; set; }
        public virtual DbSet<PromoCodeGeneric> PromoCodeGenerics { get; set; }
        public virtual DbSet<Promotion> Promotions { get; set; }
        public virtual DbSet<Region> Regions { get; set; }
        public virtual DbSet<Staff> Staffs { get; set; }
        public virtual DbSet<StaffType> StaffTypes { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<Subdomain> Subdomains { get; set; }
        public virtual DbSet<Ticket> Tickets { get; set; }
        public virtual DbSet<TicketClass> TicketClasses { get; set; }
        public virtual DbSet<TicketClassSeat> TicketClassSeats { get; set; }
        public virtual DbSet<TicketClassSeatRange> TicketClassSeatRanges { get; set; }
        public virtual DbSet<TransactionType> TransactionTypes { get; set; }
        public virtual DbSet<Vendor> Vendors { get; set; }
        public virtual DbSet<VendorEvent> VendorEvents { get; set; }
        public virtual DbSet<LastRecord> LastRecords { get; set; }
    
        public virtual ObjectResult<string> ActivateTag(string tagNumber, Nullable<int> endUserID, string activationCode, Nullable<int> tagPin)
        {
            var tagNumberParameter = tagNumber != null ?
                new ObjectParameter("TagNumber", tagNumber) :
                new ObjectParameter("TagNumber", typeof(string));
    
            var endUserIDParameter = endUserID.HasValue ?
                new ObjectParameter("EndUserID", endUserID) :
                new ObjectParameter("EndUserID", typeof(int));
    
            var activationCodeParameter = activationCode != null ?
                new ObjectParameter("ActivationCode", activationCode) :
                new ObjectParameter("ActivationCode", typeof(string));
    
            var tagPinParameter = tagPin.HasValue ?
                new ObjectParameter("TagPin", tagPin) :
                new ObjectParameter("TagPin", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ActivateTag", tagNumberParameter, endUserIDParameter, activationCodeParameter, tagPinParameter);
        }
    
        public virtual int AddTicketForEndUser(string idNo, Nullable<int> ticketClassId, Nullable<int> ticketPrice, string purchasetype)
        {
            var idNoParameter = idNo != null ?
                new ObjectParameter("IdNo", idNo) :
                new ObjectParameter("IdNo", typeof(string));
    
            var ticketClassIdParameter = ticketClassId.HasValue ?
                new ObjectParameter("TicketClassId", ticketClassId) :
                new ObjectParameter("TicketClassId", typeof(int));
    
            var ticketPriceParameter = ticketPrice.HasValue ?
                new ObjectParameter("TicketPrice", ticketPrice) :
                new ObjectParameter("TicketPrice", typeof(int));
    
            var purchasetypeParameter = purchasetype != null ?
                new ObjectParameter("Purchasetype", purchasetype) :
                new ObjectParameter("Purchasetype", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddTicketForEndUser", idNoParameter, ticketClassIdParameter, ticketPriceParameter, purchasetypeParameter);
        }
    
        public virtual int AddUserToAdminRole(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUserToAdminRole", userNameParameter);
        }
    
        public virtual int AddUserToEventAdminRole(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUserToEventAdminRole", userNameParameter);
        }
    
        public virtual ObjectResult<ApplyPromotion_Result> ApplyPromotion(string userName, string eventName, string vendorEmail)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var eventNameParameter = eventName != null ?
                new ObjectParameter("EventName", eventName) :
                new ObjectParameter("EventName", typeof(string));
    
            var vendorEmailParameter = vendorEmail != null ?
                new ObjectParameter("VendorEmail", vendorEmail) :
                new ObjectParameter("VendorEmail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ApplyPromotion_Result>("ApplyPromotion", userNameParameter, eventNameParameter, vendorEmailParameter);
        }
    
        public virtual ObjectResult<AreThereMoreTicketsThanBank_Result> AreThereMoreTicketsThanBank(string parameter)
        {
            var parameterParameter = parameter != null ?
                new ObjectParameter("Parameter", parameter) :
                new ObjectParameter("Parameter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AreThereMoreTicketsThanBank_Result>("AreThereMoreTicketsThanBank", parameterParameter);
        }
    
        public virtual ObjectResult<string> AreYouBusy(string serviceName)
        {
            var serviceNameParameter = serviceName != null ?
                new ObjectParameter("ServiceName", serviceName) :
                new ObjectParameter("ServiceName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("AreYouBusy", serviceNameParameter);
        }
    
        public virtual ObjectResult<BoxOfficeReport_Result> BoxOfficeReport(Nullable<int> eventID, string posID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            var posIDParameter = posID != null ?
                new ObjectParameter("PosID", posID) :
                new ObjectParameter("PosID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BoxOfficeReport_Result>("BoxOfficeReport", eventIDParameter, posIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<BoxOfficeReportSummary_Result> BoxOfficeReportSummary(Nullable<int> eventID)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BoxOfficeReportSummary_Result>("BoxOfficeReportSummary", eventIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> CalculateMyAvailableFundsFromAllTransactions(Nullable<int> endUserID)
        {
            var endUserIDParameter = endUserID.HasValue ?
                new ObjectParameter("endUserID", endUserID) :
                new ObjectParameter("endUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("CalculateMyAvailableFundsFromAllTransactions", endUserIDParameter);
        }
    
        public virtual ObjectResult<CancelMyTags_Result> CancelMyTags(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CancelMyTags_Result>("CancelMyTags", userNameParameter);
        }
    
        public virtual int ClearExpiredTicketSeats()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ClearExpiredTicketSeats");
        }
    
        public virtual int ClearExpiredTicketSeatsByRef(string reference)
        {
            var referenceParameter = reference != null ?
                new ObjectParameter("reference", reference) :
                new ObjectParameter("reference", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ClearExpiredTicketSeatsByRef", referenceParameter);
        }
    
        public virtual ObjectResult<CodeGen_Result> CodeGen(string tableName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CodeGen_Result>("CodeGen", tableNameParameter);
        }
    
        public virtual int CreateLoginForEventOrganiser(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateLoginForEventOrganiser", emailParameter);
        }
    
        public virtual int DanielUpdateRunningBalances()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DanielUpdateRunningBalances");
        }
    
        public virtual int DanielUpdateRunningBalancesForUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DanielUpdateRunningBalancesForUser", userIDParameter);
        }
    
        public virtual ObjectResult<DaysAvailable_Result> DaysAvailable(Nullable<int> eventID, string selectedMonth)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            var selectedMonthParameter = selectedMonth != null ?
                new ObjectParameter("SelectedMonth", selectedMonth) :
                new ObjectParameter("SelectedMonth", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DaysAvailable_Result>("DaysAvailable", eventIDParameter, selectedMonthParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> DaysAvailable2(Nullable<int> eventID, string selectedMonth)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            var selectedMonthParameter = selectedMonth != null ?
                new ObjectParameter("SelectedMonth", selectedMonth) :
                new ObjectParameter("SelectedMonth", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("DaysAvailable2", eventIDParameter, selectedMonthParameter);
        }
    
        public virtual int DeleteExpiredReservedTicketsAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteExpiredReservedTicketsAll");
        }
    
        public virtual ObjectResult<string> DoesAspNetUserExist(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DoesAspNetUserExist", emailParameter);
        }
    
        public virtual ObjectResult<string> DoesEventHasTicketSeatingPlan(Nullable<int> eventID)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DoesEventHasTicketSeatingPlan", eventIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> DoIQualifyForADiscount(Nullable<int> userID, Nullable<int> eventID, Nullable<int> vendorID, Nullable<decimal> fulltransactionAmount)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("eventID", eventID) :
                new ObjectParameter("eventID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("vendorID", vendorID) :
                new ObjectParameter("vendorID", typeof(int));
    
            var fulltransactionAmountParameter = fulltransactionAmount.HasValue ?
                new ObjectParameter("fulltransactionAmount", fulltransactionAmount) :
                new ObjectParameter("fulltransactionAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("DoIQualifyForADiscount", userIDParameter, eventIDParameter, vendorIDParameter, fulltransactionAmountParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> DoIQualifyForADiscountZAR(Nullable<int> userID, Nullable<int> eventID, Nullable<int> vendorID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("eventID", eventID) :
                new ObjectParameter("eventID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("vendorID", vendorID) :
                new ObjectParameter("vendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("DoIQualifyForADiscountZAR", userIDParameter, eventIDParameter, vendorIDParameter);
        }
    
        public virtual int DONOTUSEdeleteAllEventsWhere(string eventName, Nullable<int> @explicit)
        {
            var eventNameParameter = eventName != null ?
                new ObjectParameter("EventName", eventName) :
                new ObjectParameter("EventName", typeof(string));
    
            var explicitParameter = @explicit.HasValue ?
                new ObjectParameter("explicit", @explicit) :
                new ObjectParameter("explicit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DONOTUSEdeleteAllEventsWhere", eventNameParameter, explicitParameter);
        }
    
        public virtual ObjectResult<EORemarketingReport_Result> EORemarketingReport(Nullable<int> eventID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string firstName, string surname, string iDNumber, string ticketNumber, Nullable<System.DateTime> ticketStartDate)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("Surname", surname) :
                new ObjectParameter("Surname", typeof(string));
    
            var iDNumberParameter = iDNumber != null ?
                new ObjectParameter("IDNumber", iDNumber) :
                new ObjectParameter("IDNumber", typeof(string));
    
            var ticketNumberParameter = ticketNumber != null ?
                new ObjectParameter("TicketNumber", ticketNumber) :
                new ObjectParameter("TicketNumber", typeof(string));
    
            var ticketStartDateParameter = ticketStartDate.HasValue ?
                new ObjectParameter("TicketStartDate", ticketStartDate) :
                new ObjectParameter("TicketStartDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EORemarketingReport_Result>("EORemarketingReport", eventIDParameter, fromDateParameter, toDateParameter, firstNameParameter, surnameParameter, iDNumberParameter, ticketNumberParameter, ticketStartDateParameter);
        }
    
        public virtual ObjectResult<EOTicketReport_Result> EOTicketReport(Nullable<int> eventID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string firstName, string surname, string iDNumber, string ticketNumber, Nullable<System.DateTime> ticketStartDate)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("Surname", surname) :
                new ObjectParameter("Surname", typeof(string));
    
            var iDNumberParameter = iDNumber != null ?
                new ObjectParameter("IDNumber", iDNumber) :
                new ObjectParameter("IDNumber", typeof(string));
    
            var ticketNumberParameter = ticketNumber != null ?
                new ObjectParameter("TicketNumber", ticketNumber) :
                new ObjectParameter("TicketNumber", typeof(string));
    
            var ticketStartDateParameter = ticketStartDate.HasValue ?
                new ObjectParameter("TicketStartDate", ticketStartDate) :
                new ObjectParameter("TicketStartDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EOTicketReport_Result>("EOTicketReport", eventIDParameter, fromDateParameter, toDateParameter, firstNameParameter, surnameParameter, iDNumberParameter, ticketNumberParameter, ticketStartDateParameter);
        }
    
        public virtual ObjectResult<EOTicketReportExport_Result> EOTicketReportExport(string ticketIDList)
        {
            var ticketIDListParameter = ticketIDList != null ?
                new ObjectParameter("TicketIDList", ticketIDList) :
                new ObjectParameter("TicketIDList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EOTicketReportExport_Result>("EOTicketReportExport", ticketIDListParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> EventIDsIHaveTicketsFor(Nullable<int> endUserID)
        {
            var endUserIDParameter = endUserID.HasValue ?
                new ObjectParameter("EndUserID", endUserID) :
                new ObjectParameter("EndUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("EventIDsIHaveTicketsFor", endUserIDParameter);
        }
    
        public virtual ObjectResult<EventSummaryByEventOrganiser_Result> EventSummaryByEventOrganiser(Nullable<int> eventOrganiserID)
        {
            var eventOrganiserIDParameter = eventOrganiserID.HasValue ?
                new ObjectParameter("EventOrganiserID", eventOrganiserID) :
                new ObjectParameter("EventOrganiserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EventSummaryByEventOrganiser_Result>("EventSummaryByEventOrganiser", eventOrganiserIDParameter);
        }
    
        public virtual int ExpireTickets(string reference)
        {
            var referenceParameter = reference != null ?
                new ObjectParameter("reference", reference) :
                new ObjectParameter("reference", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExpireTickets", referenceParameter);
        }
    
        public virtual ObjectResult<GenerateNFCTags_Result> GenerateNFCTags(Nullable<int> numberRequired)
        {
            var numberRequiredParameter = numberRequired.HasValue ?
                new ObjectParameter("NumberRequired", numberRequired) :
                new ObjectParameter("NumberRequired", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GenerateNFCTags_Result>("GenerateNFCTags", numberRequiredParameter);
        }
    
        public virtual int GeneratePromoCodes(Nullable<int> ticketClassID, Nullable<int> count, Nullable<decimal> discountPercentage)
        {
            var ticketClassIDParameter = ticketClassID.HasValue ?
                new ObjectParameter("TicketClassID", ticketClassID) :
                new ObjectParameter("TicketClassID", typeof(int));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("Count", count) :
                new ObjectParameter("Count", typeof(int));
    
            var discountPercentageParameter = discountPercentage.HasValue ?
                new ObjectParameter("DiscountPercentage", discountPercentage) :
                new ObjectParameter("DiscountPercentage", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GeneratePromoCodes", ticketClassIDParameter, countParameter, discountPercentageParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetAllTicketsInThisPurchase(Nullable<int> ticketId)
        {
            var ticketIdParameter = ticketId.HasValue ?
                new ObjectParameter("TicketId", ticketId) :
                new ObjectParameter("TicketId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetAllTicketsInThisPurchase", ticketIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetCalculatedBalance(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetCalculatedBalance", iDParameter);
        }
    
        [DbFunction("MiidEntities", "GetCalendar")]
        public virtual IQueryable<Nullable<System.DateTime>> GetCalendar(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<System.DateTime>>("[MiidEntities].[GetCalendar](@Date)", dateParameter);
        }
    
        public virtual ObjectResult<string> GetCurrentEventsSp(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetCurrentEventsSp", userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<GetMyDadsIDNumber_Result> GetMyDadsIDNumber(Nullable<int> nfcTagID)
        {
            var nfcTagIDParameter = nfcTagID.HasValue ?
                new ObjectParameter("nfcTagID", nfcTagID) :
                new ObjectParameter("nfcTagID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMyDadsIDNumber_Result>("GetMyDadsIDNumber", nfcTagIDParameter);
        }
    
        public virtual ObjectResult<GetMyEvents_Result> GetMyEvents(Nullable<int> endUserID, Nullable<System.DateTime> date, Nullable<int> plusMonths)
        {
            var endUserIDParameter = endUserID.HasValue ?
                new ObjectParameter("EndUserID", endUserID) :
                new ObjectParameter("EndUserID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var plusMonthsParameter = plusMonths.HasValue ?
                new ObjectParameter("PlusMonths", plusMonths) :
                new ObjectParameter("PlusMonths", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMyEvents_Result>("GetMyEvents", endUserIDParameter, dateParameter, plusMonthsParameter);
        }
    
        public virtual ObjectResult<GetMyEventsOnly_Result> GetMyEventsOnly(Nullable<int> endUserID, Nullable<System.DateTime> date, Nullable<int> plusMonths)
        {
            var endUserIDParameter = endUserID.HasValue ?
                new ObjectParameter("EndUserID", endUserID) :
                new ObjectParameter("EndUserID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var plusMonthsParameter = plusMonths.HasValue ?
                new ObjectParameter("PlusMonths", plusMonths) :
                new ObjectParameter("PlusMonths", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMyEventsOnly_Result>("GetMyEventsOnly", endUserIDParameter, dateParameter, plusMonthsParameter);
        }
    
        public virtual ObjectResult<GetRefundableTickets_Result> GetRefundableTickets(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRefundableTickets_Result>("GetRefundableTickets", userNameParameter);
        }
    
        public virtual ObjectResult<GetRequestedTicketRefunds_Result> GetRequestedTicketRefunds(Nullable<int> eventID)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRequestedTicketRefunds_Result>("GetRequestedTicketRefunds", eventIDParameter);
        }
    
        public virtual ObjectResult<GetTicket_Result> GetTicket(Nullable<int> ticketID)
        {
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("TicketID", ticketID) :
                new ObjectParameter("TicketID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTicket_Result>("GetTicket", ticketIDParameter);
        }
    
        public virtual ObjectResult<GetTicketClassesForEvent_Result> GetTicketClassesForEvent(string eventCode, Nullable<bool> isBoxOffice)
        {
            var eventCodeParameter = eventCode != null ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(string));
    
            var isBoxOfficeParameter = isBoxOffice.HasValue ?
                new ObjectParameter("IsBoxOffice", isBoxOffice) :
                new ObjectParameter("IsBoxOffice", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTicketClassesForEvent_Result>("GetTicketClassesForEvent", eventCodeParameter, isBoxOfficeParameter);
        }
    
        public virtual ObjectResult<string> HasPurchasedATicketForThisEvent(Nullable<int> userID, Nullable<int> eventID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("HasPurchasedATicketForThisEvent", userIDParameter, eventIDParameter);
        }
    
        public virtual ObjectResult<string> IAmBusy(string serviceName, Nullable<bool> yesNo)
        {
            var serviceNameParameter = serviceName != null ?
                new ObjectParameter("ServiceName", serviceName) :
                new ObjectParameter("ServiceName", typeof(string));
    
            var yesNoParameter = yesNo.HasValue ?
                new ObjectParameter("YesNo", yesNo) :
                new ObjectParameter("YesNo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("IAmBusy", serviceNameParameter, yesNoParameter);
        }
    
        public virtual ObjectResult<string> IsIDNumberValid(Nullable<int> endUserID)
        {
            var endUserIDParameter = endUserID.HasValue ?
                new ObjectParameter("EndUserID", endUserID) :
                new ObjectParameter("EndUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("IsIDNumberValid", endUserIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> LoginEventOrganiserBoxOffice(string userName, string password, Nullable<int> eventID)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("LoginEventOrganiserBoxOffice", userNameParameter, passwordParameter, eventIDParameter);
        }
    
        public virtual int LogToDatabase(string message)
        {
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LogToDatabase", messageParameter);
        }
    
        public virtual ObjectResult<string> MonthsAvailable(Nullable<int> eventID)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("MonthsAvailable", eventIDParameter);
        }
    
        public virtual ObjectResult<string> PosIDsForEvent(Nullable<int> eventID)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PosIDsForEvent", eventIDParameter);
        }
    
        public virtual ObjectResult<PromoCodeAvailable_Result> PromoCodeAvailable(string first8, Nullable<int> ticketClassID)
        {
            var first8Parameter = first8 != null ?
                new ObjectParameter("First8", first8) :
                new ObjectParameter("First8", typeof(string));
    
            var ticketClassIDParameter = ticketClassID.HasValue ?
                new ObjectParameter("TicketClassID", ticketClassID) :
                new ObjectParameter("TicketClassID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PromoCodeAvailable_Result>("PromoCodeAvailable", first8Parameter, ticketClassIDParameter);
        }
    
        public virtual ObjectResult<string> PromoCodeUpdate(string first8, Nullable<int> endUserID, Nullable<int> ticketClassID)
        {
            var first8Parameter = first8 != null ?
                new ObjectParameter("First8", first8) :
                new ObjectParameter("First8", typeof(string));
    
            var endUserIDParameter = endUserID.HasValue ?
                new ObjectParameter("EndUserID", endUserID) :
                new ObjectParameter("EndUserID", typeof(int));
    
            var ticketClassIDParameter = ticketClassID.HasValue ?
                new ObjectParameter("TicketClassID", ticketClassID) :
                new ObjectParameter("TicketClassID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PromoCodeUpdate", first8Parameter, endUserIDParameter, ticketClassIDParameter);
        }
    
        public virtual ObjectResult<PromotionInsert_Result> PromotionInsert(string eventName, string userName, Nullable<decimal> discountAmount, string vendorName, string userStatus)
        {
            var eventNameParameter = eventName != null ?
                new ObjectParameter("EventName", eventName) :
                new ObjectParameter("EventName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var discountAmountParameter = discountAmount.HasValue ?
                new ObjectParameter("DiscountAmount", discountAmount) :
                new ObjectParameter("DiscountAmount", typeof(decimal));
    
            var vendorNameParameter = vendorName != null ?
                new ObjectParameter("VendorName", vendorName) :
                new ObjectParameter("VendorName", typeof(string));
    
            var userStatusParameter = userStatus != null ?
                new ObjectParameter("UserStatus", userStatus) :
                new ObjectParameter("UserStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PromotionInsert_Result>("PromotionInsert", eventNameParameter, userNameParameter, discountAmountParameter, vendorNameParameter, userStatusParameter);
        }
    
        public virtual ObjectResult<string> PurchaseBoxOfficeTickets(string ticketClassList)
        {
            var ticketClassListParameter = ticketClassList != null ?
                new ObjectParameter("TicketClassList", ticketClassList) :
                new ObjectParameter("TicketClassList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PurchaseBoxOfficeTickets", ticketClassListParameter);
        }
    
        public virtual int ReleaseExpiredSeats()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReleaseExpiredSeats");
        }
    
        public virtual int RemoveUser(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveUser", emailParameter);
        }
    
        public virtual ObjectResult<ReportPromoCodes_Result> ReportPromoCodes(Nullable<int> eventID)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportPromoCodes_Result>("ReportPromoCodes", eventIDParameter);
        }
    
        public virtual ObjectResult<ReportTicketGet_Result> ReportTicketGet(Nullable<int> ticketId)
        {
            var ticketIdParameter = ticketId.HasValue ?
                new ObjectParameter("TicketId", ticketId) :
                new ObjectParameter("TicketId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportTicketGet_Result>("ReportTicketGet", ticketIdParameter);
        }
    
        public virtual ObjectResult<ReportTicketGetMulti_Result> ReportTicketGetMulti(Nullable<int> ticketId)
        {
            var ticketIdParameter = ticketId.HasValue ?
                new ObjectParameter("TicketId", ticketId) :
                new ObjectParameter("TicketId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportTicketGetMulti_Result>("ReportTicketGetMulti", ticketIdParameter);
        }
    
        public virtual ObjectResult<ReportVendorSummary_Result> ReportVendorSummary(Nullable<int> eventID, Nullable<int> vendorID)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportVendorSummary_Result>("ReportVendorSummary", eventIDParameter, vendorIDParameter);
        }
    
        public virtual ObjectResult<string> ResetLogin(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ResetLogin", emailParameter);
        }
    
        public virtual ObjectResult<RestPasswordToP1_Result> RestPasswordToP1(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RestPasswordToP1_Result>("RestPasswordToP1", emailParameter);
        }
    
        public virtual int SaveQuickAddTransaction(Nullable<int> transactionAmount, Nullable<int> endUserID, Nullable<bool> isCreditTransaction)
        {
            var transactionAmountParameter = transactionAmount.HasValue ?
                new ObjectParameter("TransactionAmount", transactionAmount) :
                new ObjectParameter("TransactionAmount", typeof(int));
    
            var endUserIDParameter = endUserID.HasValue ?
                new ObjectParameter("EndUserID", endUserID) :
                new ObjectParameter("EndUserID", typeof(int));
    
            var isCreditTransactionParameter = isCreditTransaction.HasValue ?
                new ObjectParameter("IsCreditTransaction", isCreditTransaction) :
                new ObjectParameter("IsCreditTransaction", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveQuickAddTransaction", transactionAmountParameter, endUserIDParameter, isCreditTransactionParameter);
        }
    
        public virtual int SetCalculatedBalance(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetCalculatedBalance", iDParameter);
        }
    
        public virtual int SetEmailConfirmedOnAspNet(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetEmailConfirmedOnAspNet", emailParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        [DbFunction("MiidEntities", "SplitStrings_CTE")]
        public virtual IQueryable<string> SplitStrings_CTE(string list, string delimiter)
        {
            var listParameter = list != null ?
                new ObjectParameter("List", list) :
                new ObjectParameter("List", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[MiidEntities].[SplitStrings_CTE](@List, @Delimiter)", listParameter, delimiterParameter);
        }
    
        public virtual ObjectResult<TicketPurchaseCheckByReference_Result> TicketPurchaseCheckByReference(string @ref)
        {
            var refParameter = @ref != null ?
                new ObjectParameter("Ref", @ref) :
                new ObjectParameter("Ref", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TicketPurchaseCheckByReference_Result>("TicketPurchaseCheckByReference", refParameter);
        }
    
        public virtual int TopFundsReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TopFundsReport");
        }
    
        public virtual ObjectResult<string> TransferMiiFunds(Nullable<int> fromAccountID, Nullable<int> toAccountID, Nullable<decimal> transferAmount, Nullable<int> parentID)
        {
            var fromAccountIDParameter = fromAccountID.HasValue ?
                new ObjectParameter("fromAccountID", fromAccountID) :
                new ObjectParameter("fromAccountID", typeof(int));
    
            var toAccountIDParameter = toAccountID.HasValue ?
                new ObjectParameter("toAccountID", toAccountID) :
                new ObjectParameter("toAccountID", typeof(int));
    
            var transferAmountParameter = transferAmount.HasValue ?
                new ObjectParameter("transferAmount", transferAmount) :
                new ObjectParameter("transferAmount", typeof(decimal));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("parentID", parentID) :
                new ObjectParameter("parentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("TransferMiiFunds", fromAccountIDParameter, toAccountIDParameter, transferAmountParameter, parentIDParameter);
        }
    
        public virtual int UpdateBankDetails(Nullable<int> endUserID, string country, string bank, string branchCode, string accountNumber, string accountType, string accountHolderName, string notes)
        {
            var endUserIDParameter = endUserID.HasValue ?
                new ObjectParameter("EndUserID", endUserID) :
                new ObjectParameter("EndUserID", typeof(int));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var bankParameter = bank != null ?
                new ObjectParameter("Bank", bank) :
                new ObjectParameter("Bank", typeof(string));
    
            var branchCodeParameter = branchCode != null ?
                new ObjectParameter("BranchCode", branchCode) :
                new ObjectParameter("BranchCode", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var accountTypeParameter = accountType != null ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(string));
    
            var accountHolderNameParameter = accountHolderName != null ?
                new ObjectParameter("AccountHolderName", accountHolderName) :
                new ObjectParameter("AccountHolderName", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateBankDetails", endUserIDParameter, countryParameter, bankParameter, branchCodeParameter, accountNumberParameter, accountTypeParameter, accountHolderNameParameter, notesParameter);
        }
    }
}
